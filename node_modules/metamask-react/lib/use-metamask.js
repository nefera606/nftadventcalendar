"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConnectedMetaMask = exports.useMetaMask = void 0;
var React = __importStar(require("react"));
var metamask_context_1 = require("./metamask-context");
function useMetaMask() {
    var context = React.useContext(metamask_context_1.MetamaskContext);
    if (!context) {
        throw new Error("`useMetamask` should be used within a `MetaMaskProvider`");
    }
    return context;
}
exports.useMetaMask = useMetaMask;
function useConnectedMetaMask() {
    var context = useMetaMask();
    if (context.status !== "connected") {
        throw new Error("`useConnectedMetaMask` can only be used when the user is connected");
    }
    return context;
}
exports.useConnectedMetaMask = useConnectedMetaMask;
